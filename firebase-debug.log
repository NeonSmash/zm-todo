[debug] [2025-04-19T16:01:55.735Z] ----------------------------------------------------------------------
[debug] [2025-04-19T16:01:55.741Z] Command:       C:\Program Files\nodejs\node.exe C:\Users\belec\AppData\Roaming\npm\node_modules\firebase-tools\lib\bin\firebase.js init
[debug] [2025-04-19T16:01:55.742Z] CLI Version:   14.2.0
[debug] [2025-04-19T16:01:55.742Z] Platform:      win32
[debug] [2025-04-19T16:01:55.742Z] Node Version:  v22.14.0
[debug] [2025-04-19T16:01:55.743Z] Time:          Sat Apr 19 2025 18:01:55 GMT+0200 (közép-európai nyári idő)
[debug] [2025-04-19T16:01:55.743Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-04-19T16:01:56.203Z] > command requires scopes: ["email","openid","https://www.googleapis.com/auth/cloudplatformprojects.readonly","https://www.googleapis.com/auth/firebase","https://www.googleapis.com/auth/cloud-platform"]
[debug] [2025-04-19T16:01:56.204Z] > authorizing via signed-in user (beleczky.feri@gmail.com)
[info] 
     ######## #### ########  ######## ########     ###     ######  ########
     ##        ##  ##     ## ##       ##     ##  ##   ##  ##       ##
     ######    ##  ########  ######   ########  #########  ######  ######
     ##        ##  ##    ##  ##       ##     ## ##     ##       ## ##
     ##       #### ##     ## ######## ########  ##     ##  ######  ########

You're about to initialize a Firebase project in this directory:

  C:\xampp\htdocs\mzoli

Before we get started, keep in mind:

  * You are currently outside your home directory
  * You are initializing within an existing Firebase project directory

[info] 
=== Project Setup
[info] 
[info] First, let's associate this project directory with a Firebase project.
[info] You can create multiple project aliases by running firebase use --add, 
[info] but for now we'll just set up a default project.
[info] 
[debug] [2025-04-19T16:02:02.181Z] Using project from CLI flag: angular-83958
[debug] [2025-04-19T16:02:02.184Z] Checked if tokens are valid: true, expires at: 1745080592739
[debug] [2025-04-19T16:02:02.185Z] Checked if tokens are valid: true, expires at: 1745080592739
[debug] [2025-04-19T16:02:02.189Z] >>> [apiv2][query] GET https://firebase.googleapis.com/v1beta1/projects/angular-83958 [none]
[debug] [2025-04-19T16:02:02.614Z] <<< [apiv2][status] GET https://firebase.googleapis.com/v1beta1/projects/angular-83958 200
[debug] [2025-04-19T16:02:02.615Z] <<< [apiv2][body] GET https://firebase.googleapis.com/v1beta1/projects/angular-83958 {"projectId":"angular-83958","projectNumber":"965344151456","displayName":"Angular","name":"projects/angular-83958","resources":{"hostingSite":"angular-83958"},"state":"ACTIVE","etag":"1_a811b718-2056-41f5-aec5-a2967c322cb7"}
[info] i  Using project angular-83958 (Angular) 
[info] 
=== Dataconnect Setup
[debug] [2025-04-19T16:02:02.626Z] Checked if tokens are valid: true, expires at: 1745080592739
[debug] [2025-04-19T16:02:02.626Z] Checked if tokens are valid: true, expires at: 1745080592739
[debug] [2025-04-19T16:02:02.627Z] >>> [apiv2][query] GET https://cloudbilling.googleapis.com/v1/projects/angular-83958/billingInfo [none]
[debug] [2025-04-19T16:02:02.890Z] <<< [apiv2][status] GET https://cloudbilling.googleapis.com/v1/projects/angular-83958/billingInfo 200
[debug] [2025-04-19T16:02:02.890Z] <<< [apiv2][body] GET https://cloudbilling.googleapis.com/v1/projects/angular-83958/billingInfo {"name":"projects/angular-83958/billingInfo","projectId":"angular-83958","billingAccountName":"billingAccounts/0106F6-570A04-234B8A","billingEnabled":true}
[info] i  dataconnect: ensuring required API firebasedataconnect.googleapis.com is enabled... 
[debug] [2025-04-19T16:02:02.892Z] Checked if tokens are valid: true, expires at: 1745080592739
[debug] [2025-04-19T16:02:02.892Z] Checked if tokens are valid: true, expires at: 1745080592739
[debug] [2025-04-19T16:02:02.892Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/angular-83958/services/firebasedataconnect.googleapis.com [none]
[debug] [2025-04-19T16:02:02.892Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/angular-83958/services/firebasedataconnect.googleapis.com x-goog-quota-user=projects/angular-83958
[debug] [2025-04-19T16:02:03.886Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/angular-83958/services/firebasedataconnect.googleapis.com 200
[debug] [2025-04-19T16:02:03.886Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/angular-83958/services/firebasedataconnect.googleapis.com [omitted]
[info] +  dataconnect: required API firebasedataconnect.googleapis.com is enabled 
[info] i  dataconnect: ensuring required API sqladmin.googleapis.com is enabled... 
[debug] [2025-04-19T16:02:03.888Z] Checked if tokens are valid: true, expires at: 1745080592739
[debug] [2025-04-19T16:02:03.888Z] Checked if tokens are valid: true, expires at: 1745080592739
[debug] [2025-04-19T16:02:03.888Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/angular-83958/services/sqladmin.googleapis.com [none]
[debug] [2025-04-19T16:02:03.888Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/angular-83958/services/sqladmin.googleapis.com x-goog-quota-user=projects/angular-83958
[debug] [2025-04-19T16:02:04.796Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/angular-83958/services/sqladmin.googleapis.com 200
[debug] [2025-04-19T16:02:04.796Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/angular-83958/services/sqladmin.googleapis.com [omitted]
[info] +  dataconnect: required API sqladmin.googleapis.com is enabled 
[info] i  dataconnect: ensuring required API compute.googleapis.com is enabled... 
[debug] [2025-04-19T16:02:04.798Z] Checked if tokens are valid: true, expires at: 1745080592739
[debug] [2025-04-19T16:02:04.798Z] Checked if tokens are valid: true, expires at: 1745080592739
[debug] [2025-04-19T16:02:04.798Z] >>> [apiv2][query] GET https://serviceusage.googleapis.com/v1/projects/angular-83958/services/compute.googleapis.com [none]
[debug] [2025-04-19T16:02:04.798Z] >>> [apiv2][(partial)header] GET https://serviceusage.googleapis.com/v1/projects/angular-83958/services/compute.googleapis.com x-goog-quota-user=projects/angular-83958
[debug] [2025-04-19T16:02:05.447Z] <<< [apiv2][status] GET https://serviceusage.googleapis.com/v1/projects/angular-83958/services/compute.googleapis.com 200
[debug] [2025-04-19T16:02:05.448Z] <<< [apiv2][body] GET https://serviceusage.googleapis.com/v1/projects/angular-83958/services/compute.googleapis.com [omitted]
[info] +  dataconnect: required API compute.googleapis.com is enabled 
[debug] [2025-04-19T16:02:05.449Z] Checked if tokens are valid: true, expires at: 1745080592739
[debug] [2025-04-19T16:02:05.450Z] Checked if tokens are valid: true, expires at: 1745080592739
[debug] [2025-04-19T16:02:05.450Z] >>> [apiv2][query] GET https://firebasedataconnect.googleapis.com/v1/projects/angular-83958/locations/-/services [none]
[debug] [2025-04-19T16:02:06.586Z] <<< [apiv2][status] GET https://firebasedataconnect.googleapis.com/v1/projects/angular-83958/locations/-/services 200
[debug] [2025-04-19T16:02:06.586Z] <<< [apiv2][body] GET https://firebasedataconnect.googleapis.com/v1/projects/angular-83958/locations/-/services {"services":[{"name":"projects/angular-83958/locations/europe-central2/services/mzoli","createTime":"2025-04-19T14:51:25.498802669Z","updateTime":"2025-04-19T14:51:26.646280991Z","uid":"12904fff-e11c-4930-a965-7b58f7efbe6a","reconciling":false,"etag":"BMKSwN5_4UEYjsP3zFCqWQJX99cYUnbFdBQ2pNIXXoM"}]}
[debug] [2025-04-19T16:02:06.587Z] Checked if tokens are valid: true, expires at: 1745080592739
[debug] [2025-04-19T16:02:06.587Z] Checked if tokens are valid: true, expires at: 1745080592739
[debug] [2025-04-19T16:02:06.587Z] >>> [apiv2][query] GET https://firebasedataconnect.googleapis.com/v1/projects/angular-83958/locations/europe-central2/services/mzoli/schemas/main [none]
[debug] [2025-04-19T16:02:06.808Z] <<< [apiv2][status] GET https://firebasedataconnect.googleapis.com/v1/projects/angular-83958/locations/europe-central2/services/mzoli/schemas/main 200
[debug] [2025-04-19T16:02:06.808Z] <<< [apiv2][body] GET https://firebasedataconnect.googleapis.com/v1/projects/angular-83958/locations/europe-central2/services/mzoli/schemas/main {"name":"projects/angular-83958/locations/europe-central2/services/mzoli/schemas/main","createTime":"2025-04-19T15:36:43.692920871Z","updateTime":"2025-04-19T16:00:33.517644177Z","source":{"files":[{"path":"schema.gql","content":"# # Example schema for simple movie review app\n\n# # User table is keyed by Firebase Auth UID.\n# type User @table {\n#   # `@default(expr: \"auth.uid\")` sets it to Firebase Auth UID during insert and upsert.\n#   id: String! @default(expr: \"auth.uid\")\n#   username: String! @col(dataType: \"varchar(50)\")\n#   # The `user: User!` field in the Review table generates the following one-to-many query field.\n#   #  reviews_on_user: [Review!]!\n#   # The `Review` join table the following many-to-many query field.\n#   #  movies_via_Review: [Movie!]!\n# }\n\n# # Movie is keyed by a randomly generated UUID.\n# type Movie @table {\n#   # If you do not pass a 'key' to `@table`, Data Connect automatically adds the following 'id' column.\n#   # Feel free to uncomment and customize it.\n#   #  id: UUID! @default(expr: \"uuidV4()\")\n#   title: String!\n#   imageUrl: String!\n#   genre: String\n# }\n\n# # MovieMetadata is a metadata attached to a Movie.\n# # Movie <-> MovieMetadata is a one-to-one relationship\n# type MovieMetadata @table {\n#   # @unique ensures each Movie can only one MovieMetadata.\n#   movie: Movie! @unique\n#   # The movie field adds the following foreign key field. Feel free to uncomment and customize it.\n#   #  movieId: UUID!\n#   rating: Float\n#   releaseYear: Int\n#   description: String\n# }\n\n# # Reviews is a join table between User and Movie.\n# # It has a composite primary keys `userUid` and `movieId`.\n# # A user can leave reviews for many movies. A movie can have reviews from many users.\n# # User  <-> Review is a one-to-many relationship\n# # Movie <-> Review is a one-to-many relationship\n# # Movie <-> User is a many-to-many relationship\n# type Review @table(name: \"Reviews\", key: [\"movie\", \"user\"]) {\n#   user: User!\n#   # The user field adds the following foreign key field. Feel free to uncomment and customize it.\n#   #  userUid: String!\n#   movie: Movie!\n#   # The movie field adds the following foreign key field. Feel free to uncomment and customize it.\n#   #  movieId: UUID!\n#   rating: Int\n#   reviewText: String\n#   reviewDate: Date! @default(expr: \"request.time\")\n# }\n"}]},"uid":"1a7f4b3f-8b92-45a4-a6d6-ec42bd8a1032","reconciling":false,"datasources":[{"postgresql":{"database":"fdcdb","cloudSql":{"instance":"projects/angular-83958/locations/europe-central2/instances/mzoli-fdc"},"schemaValidation":"STRICT"}}],"etag":"x6k-S3iHGLPPD65OJ7DpEU2asKqiAa-v9_qHrjTzx7c"}
[debug] [2025-04-19T16:02:08.313Z] Checked if tokens are valid: true, expires at: 1745080592739
[debug] [2025-04-19T16:02:08.313Z] Checked if tokens are valid: true, expires at: 1745080592739
[debug] [2025-04-19T16:02:08.314Z] >>> [apiv2][query] GET https://firebasedataconnect.googleapis.com/v1/projects/angular-83958/locations/europe-central2/services/mzoli/connectors pageSize=100&pageToken=&fields=connectors.name%2Cconnectors.source.files
[debug] [2025-04-19T16:02:08.391Z] <<< [apiv2][status] GET https://firebasedataconnect.googleapis.com/v1/projects/angular-83958/locations/europe-central2/services/mzoli/connectors 200
[debug] [2025-04-19T16:02:08.391Z] <<< [apiv2][body] GET https://firebasedataconnect.googleapis.com/v1/projects/angular-83958/locations/europe-central2/services/mzoli/connectors {"connectors":[{"name":"projects/angular-83958/locations/europe-central2/services/mzoli/connectors/default","source":{"files":[{"path":"mutations.gql","content":"# # Example mutations for a simple movie app\n\n# # Create a movie based on user input\n# mutation CreateMovie($title: String!, $genre: String!, $imageUrl: String!)\n# @auth(level: USER_EMAIL_VERIFIED) {\n#   movie_insert(data: { title: $title, genre: $genre, imageUrl: $imageUrl })\n# }\n\n# # Upsert (update or insert) a user's username based on their auth.uid\n# mutation UpsertUser($username: String!) @auth(level: USER) {\n#   # The \"auth.uid\" server value ensures that users can only register their own user.\n#   user_upsert(data: { id_expr: \"auth.uid\", username: $username })\n# }\n\n# # Add a review for a movie\n# mutation AddReview($movieId: UUID!, $rating: Int!, $reviewText: String!)\n# @auth(level: USER) {\n#   review_upsert(\n#     data: {\n#       userId_expr: \"auth.uid\"\n#       movieId: $movieId\n#       rating: $rating\n#       reviewText: $reviewText\n#       # reviewDate defaults to today in the schema. No need to set it manually.\n#     }\n#   )\n# }\n\n# # Logged in user can delete their review for a movie\n# mutation DeleteReview($movieId: UUID!) @auth(level: USER) {\n#   # The \"auth.uid\" server value ensures that users can only delete their own reviews.\n#   review_delete(key: { userId_expr: \"auth.uid\", movieId: $movieId })\n# }\n"},{"path":"queries.gql","content":"# # Example queries for a simple movie app.\n\n# # @auth() directives control who can call each operation.\n# # Anyone should be able to list all movies, so the auth level is set to PUBLIC\n# query ListMovies @auth(level: PUBLIC) {\n#   movies {\n#     id\n#     title\n#     imageUrl\n#     genre\n#   }\n# }\n\n# # List all users, only admins should be able to list all users, so we use NO_ACCESS\n# query ListUsers @auth(level: NO_ACCESS) {\n#   users {\n#     id\n#     username\n#   }\n# }\n\n# # Logged in users can list all their reviews and movie titles associated with the review\n# # Since the query uses the uid of the current authenticated user, we set auth level to USER\n# query ListUserReviews @auth(level: USER) {\n#   user(key: { id_expr: \"auth.uid\" }) {\n#     id\n#     username\n#     # <field>_on_<foreign_key_field> makes it easy to grab info from another table\n#     # Here, we use it to grab all the reviews written by the user.\n#     reviews: reviews_on_user {\n#       rating\n#       reviewDate\n#       reviewText\n#       movie {\n#         id\n#         title\n#       }\n#     }\n#   }\n# }\n\n# # Get movie by id\n# query GetMovieById($id: UUID!) @auth(level: PUBLIC) {\n#   movie(id: $id) {\n#     id\n#     title\n#     imageUrl\n#     genre\n#     metadata: movieMetadata_on_movie {\n#       rating\n#       releaseYear\n#       description\n#     }\n#     reviews: reviews_on_movie {\n#       reviewText\n#       reviewDate\n#       rating\n#       user {\n#         id\n#         username\n#       }\n#     }\n#   }\n# }\n\n# # Search for movies, actors, and reviews\n# query SearchMovie($titleInput: String, $genre: String) @auth(level: PUBLIC) {\n#   movies(\n#     where: {\n#       _and: [{ genre: { eq: $genre } }, { title: { contains: $titleInput } }]\n#     }\n#   ) {\n#     id\n#     title\n#     genre\n#     imageUrl\n#   }\n# }\n"}]}}]}
[info] i  dataconnect\dataconnect.yaml is unchanged 
[info] i  dataconnect\schema\schema.gql is unchanged 
[info] i  dataconnect\connector\connector.yaml is unchanged 
[info] i  dataconnect\connector\mutations.gql is unchanged 
[info] i  dataconnect\connector\queries.gql is unchanged 
[info] +  Detected WEB app in directory C:\xampp\htdocs\mzoli\zm-todo 
[info] i  Detected angular app. Enabling angular generated SDKs. 
[info] i  Writing your new SDK configuration to C:\xampp\htdocs\mzoli\dataconnect\connector/connector.yaml 
[info] +  Wrote dataconnect\connector\connector.yaml 
[debug] [2025-04-19T16:02:21.431Z] defaultcredentials: writing to file C:\Users\belec\AppData\Roaming\firebase\beleczky_feri_gmail.com_application_default_credentials.json
[debug] [2025-04-19T16:02:21.434Z] Setting GAC to C:\Users\belec\AppData\Roaming\firebase\beleczky_feri_gmail.com_application_default_credentials.json {"metadata":{"emulator":{"name":"dataconnect"},"message":"Setting GAC to C:\\Users\\belec\\AppData\\Roaming\\firebase\\beleczky_feri_gmail.com_application_default_credentials.json"}}
[info] I0419 18:02:21.612243   11672 codegen.go:82] [connector "default" javascriptSdk] Generating sources into "C:\\xampp\\htdocs\\mzoli\\zm-todo\\dataconnect-generated\\js\\default-connector"
I0419 18:02:21.639183   11672 generate.go:40] Generated all sources. Writing them to disk...
I0419 18:02:21.680748   11672 collector.go:107] connector "default" javascriptSdk wrote into "C:\\xampp\\htdocs\\mzoli\\zm-todo\\dataconnect-generated\\js\\default-connector"
Generated sources: README.md [2774B] react\index.cjs.js [0B] package.json [1110B] esm\package.json [17B] react\index.d.ts [228B] react\README.md [5417B] angular\index.d.ts [0B] angular\esm\package.json [17B] angular\esm\index.esm.js [0B] index.d.ts [246B] index.cjs.js [147B] react\package.json [468B] react\esm\package.json [17B] react\esm\index.esm.js [0B] angular\package.json [661B] angular\index.cjs.js [1B] esm\index.esm.js [112B] 
I0419 18:02:21.803900   11672 installsdk.go:80] Running command: C:\Program Files\nodejs\npm.cmd install file:dataconnect-generated\js\default-connector

